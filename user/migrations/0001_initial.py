# Generated by Django 5.1.4 on 2025-01-24 18:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PermissionGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('permissions_group', models.CharField(choices=[('Administration', 'Administration'), ('Authentication and Authorization', 'Authentication and Authorization'), ('Content Types', 'Content Types'), ('Order', 'Order'), ('Orderitem', 'Orderitem'), ('Product', 'Product'), ('Sessions', 'Sessions'), ('User', 'User')], max_length=100, verbose_name='Permissions Group')),
                ('can_add', models.BooleanField(default=False, verbose_name='Can Add')),
                ('can_change', models.BooleanField(default=False, verbose_name='Can Change')),
                ('can_delete', models.BooleanField(default=False, verbose_name='Can Delete')),
                ('can_view', models.BooleanField(default=False, verbose_name='Can View')),
                ('can_approve', models.BooleanField(default=False, verbose_name='Can Approve')),
            ],
        ),
        migrations.CreateModel(
            name='ResUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('internal', 'Internal'), ('external', 'External')], default='internal', max_length=50, verbose_name='Role Type')),
                ('role_name', models.CharField(choices=[('super_admin', 'Project Owner'), ('admin', 'Super User'), ('staff', 'Key User'), ('craftsman', 'Craftsman'), ('seller', 'End User'), ('customer', 'One Time User')], default='super_admin', max_length=50, verbose_name='Role Name')),
                ('full_name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('mobile_no', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Mobile number must be between 10 to 15 digits and numeric.', regex='^[0-9]{10,15}$')], verbose_name='Mobile Number')),
                ('company_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Company Name')),
                ('email_id', models.EmailField(max_length=254, null=True, unique=True, validators=[django.core.validators.EmailValidator(message='Enter a valid email address.')], verbose_name='Email ID')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country')),
                ('state', models.CharField(blank=True, max_length=100, null=True, verbose_name='State')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='City')),
                ('pincode', models.CharField(blank=True, max_length=10, null=True, verbose_name='Pincode')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10, verbose_name='Status')),
                ('dob', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True, verbose_name='Gender')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='User/Profile', verbose_name='Profile Picture')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('permission_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user.permissiongroup')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
